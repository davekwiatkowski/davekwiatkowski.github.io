{"version":3,"sources":["components/Link.tsx","constants/Links.ts","constants/Strings.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Link","props","className","isPrecededBySpace","target","rel","href","url","title","text","isSucceededBySpace","Links","employer","homeTown","resume","medium","codePen","linkedIn","github","email","soundCloud","strava","Strings","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAwBeA,G,gBAdc,SAACC,GAAD,OAC3B,0BAAMC,UAAU,QACbD,EAAME,mBAAqB,IAC5B,uBACEC,OAAO,SACPC,IAAI,sBACJC,KAAML,EAAMM,IACZC,MAAOP,EAAMQ,MACZR,EAAMQ,MAERR,EAAMS,oBAAsB,OCNlBC,EAdD,CACZC,SAAU,0CACVC,SACE,2KACFC,OAAQ,4CACRC,OAAQ,sCACRC,QAAS,qCACTC,SAAU,0CACVC,OAAQ,qCACRC,MAAO,8CACPC,WAAY,oCACZC,OAAQ,4CCEKC,EAbC,CACdH,MAAO,qCACPP,SAAU,qBACVC,SAAU,sBACVC,OAAQ,2BACRE,QAAS,4BACTE,OAAQ,qBACRH,OAAQ,qBACRE,SAAU,uBACVG,WAAY,yBACZC,OAAQ,4BCiCKE,EArCC,kBACd,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,WACb,wEAEE,kBAAC,EAAD,CACEO,KAAMa,EAAQV,SACdL,IAAKI,EAAMC,SACXT,mBAAiB,EACjBO,oBAAkB,IANtB,eASE,kBAAC,EAAD,CAAMD,KAAMa,EAAQT,SAAUN,IAAKI,EAAME,SAAUV,mBAAiB,IATtE,KAWA,iDAEE,kBAAC,EAAD,CAAMM,KAAMa,EAAQN,QAAST,IAAKI,EAAMK,QAASb,mBAAiB,IAFpE,IAGE,kBAAC,EAAD,CAAMM,KAAMa,EAAQJ,OAAQX,IAAKI,EAAMO,OAAQf,mBAAiB,IAHlE,IAIE,kBAAC,EAAD,CAAMM,KAAMa,EAAQL,SAAUV,IAAKI,EAAMM,SAAUd,mBAAiB,IAJtE,IAKE,kBAAC,EAAD,CAAMM,KAAMa,EAAQP,OAAQR,IAAKI,EAAMI,OAAQZ,mBAAiB,IALlE,IAME,kBAAC,EAAD,CACEM,KAAMa,EAAQF,WACdb,IAAKI,EAAMS,WACXjB,mBAAiB,IATrB,QAYE,kBAAC,EAAD,CAAMM,KAAMa,EAAQD,OAAQd,IAAKI,EAAMU,OAAQlB,mBAAiB,IAZlE,KAcA,mDACuB,kBAAC,EAAD,CAAMM,KAAMa,EAAQH,MAAOZ,IAAKI,EAAMQ,QAD7D,kBAGE,kBAAC,EAAD,CAAMV,KAAMa,EAAQR,OAAQP,IAAKI,EAAMG,OAAQX,mBAAiB,IAHlE,QCtBcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6023dcdc.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport './Link.css';\n\ninterface ILinkProps {\n  text: string;\n  url: string;\n  isPrecededBySpace?: boolean;\n  isSucceededBySpace?: boolean;\n}\n\nconst Link: FC<ILinkProps> = (props) => (\n  <span className='Link'>\n    {props.isPrecededBySpace && ' '}\n    <a\n      target='_blank'\n      rel='noopener noreferrer'\n      href={props.url}\n      title={props.text}>\n      {props.text}\n    </a>\n    {props.isSucceededBySpace && ' '}\n  </span>\n);\n\nexport default Link;\n","const Links = {\n  employer: 'https://www.uipath.com/company/about-us',\n  homeTown:\n    'https://www.google.com/maps/place/Seattle,+WA/@47.6129432,-122.4821475,11z/data=!3m1!4b1!4m5!3m4!1s0x5490102c93e83355:0x102565466944d59a!8m2!3d47.6062095!4d-122.3320708',\n  resume: 'https://davekwiatkowski.com/resume/cv.pdf',\n  medium: 'https://medium.com/@davekwiatkowski',\n  codePen: 'https://codepen.io/davekwiatkowski',\n  linkedIn: 'https://linkedin.com/in/davekwiatkowski',\n  github: 'https://github.com/davekwiatkowski',\n  email: 'mailto:hi@davekwiatkowski.com?Subject=Hello',\n  soundCloud: 'https://soundcloud.com/druffelion',\n  strava: 'https://www.strava.com/athletes/60365526',\n};\n\nexport default Links;\n","const Strings = {\n  email: 'hi@davekwiatkowski.com📧',\n  employer: 'UiPath🤖',\n  homeTown: 'Seattle⛰️',\n  resume: 'résumé📜',\n  codePen: 'CodePen🖊️',\n  github: 'GitHub🐙',\n  medium: 'Medium📔',\n  linkedIn: 'LinkedIn🔗',\n  soundCloud: 'SoundCloud☁️',\n  strava: 'Strava🏃‍',\n};\n\nexport default Strings;\n","import './App.css';\nimport React, { FC } from 'react';\nimport Link from './components/Link';\nimport Links from './constants/Links';\nimport Strings from './constants/Strings';\n\nconst App: FC = () => (\n  <div className='App'>\n    <div className='Content'>\n      <p>\n        Dave Kwiatkowski is a software engineer at\n        <Link\n          text={Strings.employer}\n          url={Links.employer}\n          isPrecededBySpace\n          isSucceededBySpace\n        />\n        and lives in\n        <Link text={Strings.homeTown} url={Links.homeTown} isPrecededBySpace />.\n      </p>\n      <p>\n        You can find him on\n        <Link text={Strings.codePen} url={Links.codePen} isPrecededBySpace />,\n        <Link text={Strings.github} url={Links.github} isPrecededBySpace />,\n        <Link text={Strings.linkedIn} url={Links.linkedIn} isPrecededBySpace />,\n        <Link text={Strings.medium} url={Links.medium} isPrecededBySpace />,\n        <Link\n          text={Strings.soundCloud}\n          url={Links.soundCloud}\n          isPrecededBySpace\n        />\n        , and\n        <Link text={Strings.strava} url={Links.strava} isPrecededBySpace />.\n      </p>\n      <p>\n        You can email him at <Link text={Strings.email} url={Links.email} /> or\n        look at his\n        <Link text={Strings.resume} url={Links.resume} isPrecededBySpace />.\n      </p>\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}