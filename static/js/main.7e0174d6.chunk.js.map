{"version":3,"sources":["images/gif.gif","components/Link.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Link","props","className","isPrecededBySpace","target","rel","href","url","text","isSucceededBySpace","App","width","max-width","height","alt","src","gif","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,iC,mKCsB5BC,G,iBAZc,SAACC,GAAD,OAC3B,0BAAMC,UAAU,QACbD,EAAME,mBAAqB,IAC5B,uBAAGC,OAAO,SACRC,IAAI,sBACJC,KAAML,EAAMM,KACXN,EAAMO,MAERP,EAAMQ,oBAAsB,O,gBCkClBC,EAhDC,kBACd,yBAAKR,UAAU,OACb,yBAAKA,UAAU,WACb,yBACES,MAAM,OACNC,YAAU,OACVC,OAAO,OACPC,IAAI,MACJC,IAAKC,MAEP,qCACA,yDAEE,kBAAC,EAAD,CACER,KAAK,YACLD,IAAI,wBACJJ,mBAAiB,EACjBM,oBAAkB,IANtB,cASE,kBAAC,EAAD,CACED,KAAK,UACLD,IAAI,2KACJJ,mBAAiB,IAZrB,KAgBA,oCAEE,kBAAC,EAAD,CACEK,KAAK,WACLD,IAAI,gCACJJ,mBAAiB,EACjBM,oBAAkB,IANtB,mBASE,kBAAC,EAAD,CACED,KAAK,WACLD,IAAI,0CACJJ,mBAAiB,IAZrB,KAgBA,wCCnCcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7e0174d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gif.44b1529f.gif\";","import React, { FC } from 'react';\nimport './Link.css';\n\ninterface ILinkProps {\n  text: string;\n  url: string;\n  isPrecededBySpace?: boolean;\n  isSucceededBySpace?: boolean;\n}\n\nconst Link: FC<ILinkProps> = (props) => (\n  <span className='Link'>\n    {props.isPrecededBySpace && ' '}\n    <a target='_blank'\n      rel='noopener noreferrer'\n      href={props.url}>\n      {props.text}\n    </a>\n    {props.isSucceededBySpace && ' '}\n  </span>\n);\n\nexport default Link;","import React, { FC } from 'react';\nimport './App.css';\nimport Link from './components/Link';\nimport gif from './images/gif.gif';\nconst App: FC = () => (\n  <div className='App'>\n    <div className='Content'>\n      <img\n        width='100%'\n        max-width='100%'\n        height='auto'\n        alt='gif'\n        src={gif}\n      />\n      <p>Hello!</p>\n      <p>\n        I am a software engineer at\n        <Link\n          text='Microsoft'\n          url='https://microsoft.com'\n          isPrecededBySpace\n          isSucceededBySpace\n        />\n        and live in\n        <Link\n          text='Seattle'\n          url='https://www.google.com/maps/place/Seattle,+WA/@47.6129432,-122.4821475,11z/data=!3m1!4b1!4m5!3m4!1s0x5490102c93e83355:0x102565466944d59a!8m2!3d47.6062095!4d-122.3320708'\n          isPrecededBySpace\n        />\n        .\n      </p>\n      <p>\n        Please\n        <Link\n          text='email me'\n          url='mailto:hi@davekwiatkowski.com'\n          isPrecededBySpace\n          isSucceededBySpace\n        />\n        or message me on\n        <Link\n          text='LinkedIn'\n          url='https://linkedin.com/in/davekwiatkowski'\n          isPrecededBySpace\n        />\n        .\n      </p>\n      <p>- Dave</p>\n    </div>\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}